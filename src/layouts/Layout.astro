---
import '../styles/global.css';

import Header from './Header.astro';
import Footer from './Footer.astro';

const { title = 'Title', description = 'Description' } = Astro.props;
---

<!doctype html>
<html lang="en">
    <head>
        <meta charset="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <meta name="description" content={description}>
        <link rel="icon" href="/favicon.svg">
        <title> {title} </title>
        <script src="/lib/particles.js/particles.min.js" defer></script>
        <link
            rel="preload"
            as="font"
            type="font/woff2"
            href="/fonts/poppins-v20-latin-regular.woff2"
            crossorigin
        >
        <link
            rel="preload"
            as="font"
            type="font/woff2"
            href="/fonts/poppins-v20-latin-600.woff2"
            crossorigin
        >
    </head>

    <body>
        <Header />

        <main class="main">
            <slot />
        </main>

        <Footer/>

        <a class="to-top-button" href="#top" title="Scroll Up" role="button">
            <svg viewBox="0 0 24 24">
                <use href="/icons/icons-set.svg#arrow-up"></use>
            </svg>
        </a>

        <div class="particles-bg-container">
            <canvas class="particles-bg"></canvas>
        </div>
    </body>
</html>

<script>
    let isPageScrolled = false;
    let areParticlesVisible = true;

    const header = document.querySelector('header.header');
    const toTopButton = document.querySelector('.to-top-button');
    const observerTarget = document.querySelector('.particles-bg');

    function handleScrollRelatedAnimation(particles) {
        if (isPageScrolled) {
            header.classList.add('header_small');
        }
        else {
            header.classList.remove('header_small');
        }

        if (areParticlesVisible) {
            particles.resumeAnimation();
            // particles.pauseAnimation();
            toTopButton.removeAttribute('style');
        }
        else {
            particles.pauseAnimation();
            toTopButton.style.bottom = '20px';
        }
    }

    async function initIntersectionObserver() {
        const { particles } = await import(
            '../config/particles.init.config.js'
        );

        const callback = (entries) => {
            if (entries[0].isIntersecting) {
                isPageScrolled = entries[0].intersectionRatio < 0.95;
                areParticlesVisible = true;
            }
            else {
                areParticlesVisible = false;
            }

            handleScrollRelatedAnimation(particles);
        };

        const options = {
            threshold: [0.1, 0.95],
        };

        const observer = new IntersectionObserver(callback, options);
        observer.observe(observerTarget);
    }

    (function init() {
        if (!header || !toTopButton || !observerTarget) {
            return;
        }

        initIntersectionObserver();
    })();
</script>
